<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kenny Fraser</title>
    <description>Kenny Fraser - Web Design, Front End Web Development and Digital Marketing professional based near Inverness in the Scottish Highlands.</description>
    <link>http://kennyfraser.com/</link>
    <atom:link href="http://kennyfraser.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 10 Apr 2017 11:18:22 +0100</pubDate>
    <lastBuildDate>Mon, 10 Apr 2017 11:18:22 +0100</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>Quickly convert Markdown files to pdf</title>
        <description>&lt;p&gt;These days I try and use &lt;a href=&quot;//daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; wherever possible to apply a basic level of formatting to text content, quickly and easily.  The content for this &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;-based site is mostly written in Markdown.  I use it for formatting template-based transactional emails, with Adam Pritchard’s &lt;a href=&quot;https://github.com/adam-p/markdown-here&quot;&gt;Markdown Here&lt;/a&gt; Chrome extension.  It’s also good for content creation in &lt;a href=&quot;https://v1.statamic.com/learn/core-concepts/content-files&quot;&gt;Statamic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Adam’s written a &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet&quot;&gt;Markdown Cheat Sheet&lt;/a&gt; and there are other guides for Markdown usage on &lt;a href=&quot;https://help.github.com/articles/basic-writing-and-formatting-syntax/&quot;&gt;Github&lt;/a&gt; and &lt;a href=&quot;http://stackoverflow.com/editing-help&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A Very Useful Thing would be to quickly generate a pdf from a Markdown file (normally with file extension &lt;em&gt;.md&lt;/em&gt; or &lt;em&gt;.markdown&lt;/em&gt;).  This would allow generation of an easily shareable, formatted text document in a simple text editor, without the requirement for something heavyweight like Microsoft Word.  If you use &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node&lt;/a&gt; on your local machine, it’s accomplishable using Alan Shaw’s &lt;a href=&quot;https://github.com/alanshaw/markdown-pdf#cli-interface&quot;&gt;markdown-pdf Node module as a standalone terminal program&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install your local module globally:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install -g markdown-pdf &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Navigate to the directory in the command line containing your Markdown file, and generate the pdf using the Markdown converter:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;yourcontainingdirectory 
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;markdown-pdf yourmarkdownfile.md  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

&lt;p&gt;Here’s an example of a Markdown text file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/original-markdown-file.png&quot; alt=&quot;original Markdown text file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here’s what the resulting pdf looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/resulting-pdf-file.png&quot; alt=&quot;resulting formatted pdf file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a number of configurable options, and of course the module can alternatively be called as part of a process on a server supporting Node.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 14:00:00 +0100</pubDate>
        <link>http://kennyfraser.com/productivity/convert-markdown-files-to-pdf</link>
        <guid isPermaLink="true">http://kennyfraser.com/productivity/convert-markdown-files-to-pdf</guid>
        
        
      </item>
    
      <item>
        <title>Upgrading a Statamic site from v1 to v2</title>
        <description>&lt;p&gt;&lt;a href=&quot;//statamic.com&quot;&gt;Statamic&lt;/a&gt; is a flat-file, &lt;a href=&quot;//laravel.com/&quot;&gt;Laravel&lt;/a&gt;-based content management system built and supported by &lt;a href=&quot;//wilderborn.com/&quot;&gt;Wilderborn&lt;/a&gt; (&lt;a href=&quot;//twitter.com/jackmcdade&quot;&gt;Jack McDade&lt;/a&gt;, &lt;a href=&quot;//twitter.com/jason_varga&quot;&gt;Jason Varga&lt;/a&gt; and &lt;a href=&quot;//twitter.com/garethredfern&quot;&gt;Gareth Redfern&lt;/a&gt;).  It’s great to work with.  I had the opportunity to upgrade a v1 site this week, so here’s my tuppence-worth.&lt;/p&gt;

&lt;p&gt;The Statamic v2 documentation is excellent, taking the form of &lt;a href=&quot;//docs.statamic.com/guides&quot;&gt;Trail Guides&lt;/a&gt; as walk-through processes, and &lt;a href=&quot;//docs.statamic.com/reference&quot;&gt;Reference&lt;/a&gt; for the specific ingredients.  It’s written in a conversational style with a liberal sprinkling of unselfconscious humour…&lt;/p&gt;

&lt;p&gt;Overall it’s a case of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;setting up a clean v2 installation, which includes example content&lt;/li&gt;
  &lt;li&gt;removing the example content and files (optional)&lt;/li&gt;
  &lt;li&gt;transferring v1 files across in a sensible order - no database to worry about&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;v2-installation&quot;&gt;v2 Installation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;//docs.statamic.com/guides/getting-started&quot;&gt;Getting Started With Statamic&lt;/a&gt; walks through setting up Statamic v2, and there’s a &lt;a href=&quot;https://vimeo.com/165632057&quot;&gt;useful video on Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//www.mamp.info/en/&quot;&gt;Mamp Pro&lt;/a&gt; was the tool of choice for my local installation.&lt;/p&gt;

&lt;p&gt;To configure URL rewrites, the sample &lt;em&gt;.htaccess&lt;/em&gt; file should really be used so &lt;em&gt;/index.php/&lt;/em&gt; is removed from resulting URLs.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;installer.php&lt;/em&gt; file can be run locally to check requirements and set up a few handy things.  This seemed to cleverly delete itself after running locally, so I had to find it again to copy it up to the production server to check that.  For the production site I’m transferring hosts to get the required &lt;em&gt;PHP &amp;gt;= 5.5.9&lt;/em&gt; version, though this wasn’t unexpected and not a big deal, with performance improvements also on offer at the new host.  &lt;em&gt;Zip archive support for updater backups&lt;/em&gt; failed on production, and &lt;em&gt;always_populate_raw_post_data=-1&lt;/em&gt; on both production and local.  Not to worry, for now at least.&lt;/p&gt;

&lt;p&gt;System files can be &lt;a href=&quot;//docs.statamic.com/reference/recipes/secure-installation&quot;&gt;moved above webroot&lt;/a&gt; for additional security.  There’s a bit of extra work there in adjusting default paths in settings files.&lt;/p&gt;

&lt;p&gt;The one-click updater tool in v2 is a potentially great time-saving addition.&lt;/p&gt;

&lt;h2 id=&quot;clear-site-to-remove-v2-example-files&quot;&gt;Clear Site to Remove v2 Example Files&lt;/h2&gt;

&lt;p&gt;There’s a handy wee command line instruction to do this, with options:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;php please clear:site&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://vimeo.com/164430243&quot;&gt;Best described in this video&lt;/a&gt;.  It can also create a new theme skeleton for you.&lt;/p&gt;

&lt;p&gt;This is optional and can be done after importing your v1 site, as I did after Jack pointed out the video.  However since it wipes &lt;strong&gt;all&lt;/strong&gt; &lt;em&gt;/themes/&lt;/em&gt;, &lt;em&gt;/collections/&lt;/em&gt; and /&lt;em&gt;pages&lt;/em&gt;/ subdirectories, in retrospect I’d recommend instead:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;set up and play locally with the example files on a complete v2 site&lt;/li&gt;
  &lt;li&gt;set up a fresh v2 site and run Clear Site before the next v1 site import step&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don’t choose to Clear Site, example content &lt;em&gt;/pages/&lt;/em&gt; and &lt;em&gt;/collections/&lt;/em&gt; subdirectory names can be prefixed with an underscore to hide but retain them for future reference.&lt;/p&gt;

&lt;h2 id=&quot;moving-v1-files&quot;&gt;Moving v1 Files&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;//docs.statamic.com/guides/upgrading-from-v1&quot;&gt;You Can Get Here From There&lt;/a&gt; clears a path through the undergrowth for an upgrade from v1.&lt;/p&gt;

&lt;p&gt;The v2 Control Panel is now located at &lt;em&gt;http://yourdomain/cp/&lt;/em&gt; - this nugget tucked away in the docs under &lt;em&gt;New Defaults&lt;/em&gt;. So &lt;em&gt;Tools : Import&lt;/em&gt; then &lt;em&gt;Import content from Statamic v1&lt;/em&gt; instructs you to download an &lt;em&gt;exporter&lt;/em&gt; add-on for installation into your &lt;strong&gt;v1&lt;/strong&gt; site.  Visit the generated URL for a JSON string which can be pasted back into your v2 control panel.  The result was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;v1 &lt;em&gt;Entries&lt;/em&gt; were taken in as new v2 &lt;em&gt;Collections&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Pages&lt;/em&gt; are transformed to their v2 equivalents&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nice.&lt;/p&gt;

&lt;p&gt;A few variables had to be renamed for the site to start working again - for example:&lt;/p&gt;

&lt;p&gt;{{ layout_content }}&lt;/p&gt;

&lt;p&gt;…becomes:&lt;/p&gt;

&lt;p&gt;{{ template_content }}&lt;/p&gt;

&lt;p&gt;…and underscores needed removed from various variables.&lt;/p&gt;

&lt;p&gt;The custom theme from the &lt;em&gt;/themes/&lt;/em&gt; directory had to be moved across manually.  Assets can be similarly copied across from the v1 &lt;em&gt;/assets/&lt;/em&gt; directory to the corresponding v2 location.&lt;/p&gt;

&lt;p&gt;Optionally (as &lt;em&gt;entries:listing&lt;/em&gt; is backwards-compatible), the main change here is renaming &lt;em&gt;entries&lt;/em&gt; in the template code:&lt;/p&gt;

&lt;p&gt;{{ entries:listing folder=”example” }}…{{ /entries:listing }}&lt;/p&gt;

&lt;p&gt;… as &lt;em&gt;collections&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;{{ collection:example }}…{{ /collection:example }}&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That was it!  Up and running locally with v2.  The original v1 site wasn’t enormously complicated but I guess the principles would probably remain the same if it had been.  The main process just took a couple of hours as a first attempt, and the next v1 upgrade will go a lot quicker I’m sure.&lt;/p&gt;

&lt;p&gt;There’s a high degree of integrity about Statamic that makes it very reassuring to work with, and their &lt;a href=&quot;//slack.statamic.com&quot;&gt;Slack&lt;/a&gt; v2 support channel is very active.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/statamic.png&quot; alt=&quot;Statamic&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 06 May 2016 14:00:00 +0100</pubDate>
        <link>http://kennyfraser.com/cms/upgrading-a-statamic-site-from-v1-to-v2</link>
        <guid isPermaLink="true">http://kennyfraser.com/cms/upgrading-a-statamic-site-from-v1-to-v2</guid>
        
        
      </item>
    
      <item>
        <title>Extracting embedded images from a Word file</title>
        <description>&lt;p&gt;Here’s a great wee tip &lt;a href=&quot;http://cnedelcu.blogspot.co.uk/2013/02/top-3-ways-to-extract-images-from-word-docx-doc-document.html&quot;&gt;which I discovered here&lt;/a&gt;, solving an issue which has bugged me for years.&lt;/p&gt;

&lt;p&gt;If you need to extract images from a Word file that someone has supplied, at their original full resolution, just:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open then Save it from a current version of Word as a &lt;em&gt;.docx&lt;/em&gt; file&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Duplicate and rename the Word file, changing the extension from &lt;em&gt;.docx&lt;/em&gt; to &lt;em&gt;.zip&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the unzipped directory and navigate to &lt;em&gt;/filename/word/media/&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Voilà! There they are.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/extract-images-from-Word-file.png&quot; alt=&quot;get embedded images from a Word file&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Apr 2016 15:00:00 +0100</pubDate>
        <link>http://kennyfraser.com/productivity/extract-images-from-Word-file</link>
        <guid isPermaLink="true">http://kennyfraser.com/productivity/extract-images-from-Word-file</guid>
        
        
      </item>
    
      <item>
        <title>Management of Packt Publishing's PacktLib Subscription</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.packtpub.com/&quot;&gt;Packt Publishing&lt;/a&gt; has a interesting option for online access to its publications, using a subscription service called &lt;a href=&quot;https://www.packtpub.com/packtlib&quot;&gt;PacktLib&lt;/a&gt;.  Packt’s content is technical, and excellent if it suits your needs, with up-to-date coverage of technologies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/PACKTLiB.png&quot; alt=&quot;PACKTLiB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the time of writing, the recurring subscription charge is managed via &lt;a href=&quot;http://www.worldpay.com/&quot;&gt;WorldPay&lt;/a&gt; in the form of &lt;a href=&quot;http://support.worldpay.com/support/shopper/kb/shoppermanagementsystem/sms1200.html#recurring&quot;&gt;FuturePay&lt;/a&gt;.  On signing up to PacktLib, you receive a confirmation from WorldPay with your &lt;em&gt;Agreement ID&lt;/em&gt;, &lt;em&gt;Username&lt;/em&gt; and a promise of a password (which didn’t arrive separately in my case) to access your FuturePay subscription.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://futurepay.worldpay.com/fp/jsp/common/login_shopper.jsp&quot;&gt;request a FuturePay admin password&lt;/a&gt; using the details you already have, to access your recurring payment details and cancel if necessary.  There’s no option to pause.&lt;/p&gt;

&lt;p&gt;To unsubscribe, Packt recommend you cancel the agreement with both themselves and WorldPay.  Then to re-subscribe a new FuturePay agreement is set up…&lt;/p&gt;

&lt;p&gt;I suppose a message to Packt Publishing is &lt;strong&gt;if you’d like customers to continue their subscription long-term, make it super easy for them to temporarily unsubscribe&lt;/strong&gt;. The access is great but ideally we need to feel comfortable with managing our subscription during months when we’re busier with other things.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://teamtreehouse.com/support&quot;&gt;Treehouse&lt;/a&gt; does the subscription thing right.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Apr 2016 09:00:00 +0100</pubDate>
        <link>http://kennyfraser.com/learn/management-of-packt-publishing-packtlib-subscription</link>
        <guid isPermaLink="true">http://kennyfraser.com/learn/management-of-packt-publishing-packtlib-subscription</guid>
        
        
      </item>
    
      <item>
        <title>Renaming folders in Amazon S3</title>
        <description>&lt;p&gt;Strange as it may seem, you can’t directly rename folders in the Amazon S3 online console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/S3-cannot-rename-directory.png&quot; alt=&quot;cannot rename folder in Amazon S3 console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Files yes, but directories no.  As I had a batch to do, this was a bit of a pain.&lt;/p&gt;

&lt;p&gt;There do seem to be wee Windows S3 clients that will offer this functionality though.  One which came to the rescue was the free &lt;a href=&quot;http://s3browser.com/&quot;&gt;S3 Browser&lt;/a&gt; which did the job, though just one directory at a time.  Install, plug in your access credentials and away you go.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/S3-Browser.jpg&quot; alt=&quot;S3 browser&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Mar 2016 17:30:00 +0000</pubDate>
        <link>http://kennyfraser.com/amazon/rename-folders-in-S3</link>
        <guid isPermaLink="true">http://kennyfraser.com/amazon/rename-folders-in-S3</guid>
        
        
      </item>
    
      <item>
        <title>301 redirects in .htaccess for filenames with spaces</title>
        <description>&lt;p&gt;I was working on a site where pages had originally been named using an old WYSIWYG editor, with spaces in the filenames.  These were being served up OK in the browser, which URL-encoded the space (as an &lt;a href=&quot;http://www.w3schools.com/tags/ref_urlencode.asp&quot;&gt;unsafe ASCII character&lt;/a&gt;) to &lt;em&gt;%20&lt;/em&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;http://example.com/old%20filename%20with%20spaces.htm&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However when using this URL-encoded format in the &lt;em&gt;.htaccess&lt;/em&gt; file, the server generated an error for the &lt;em&gt;301 Redirect&lt;/em&gt; lines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;Redirect 301 /old%20filename%20with%20spaces.htm /nice-clean-new-url/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The correct way to redirect filenames with spaces in &lt;em&gt;.htaccess&lt;/em&gt; is by leaving the spaces, and quoting the filename:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;Redirect 301 &lt;span class=&quot;s2&quot;&gt;&quot;/old filename with spaces.htm&quot;&lt;/span&gt; /nice-clean-new-url/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 10:00:00 +0000</pubDate>
        <link>http://kennyfraser.com/htaccess/301-redirect-filenames-with-spaces</link>
        <guid isPermaLink="true">http://kennyfraser.com/htaccess/301-redirect-filenames-with-spaces</guid>
        
        
      </item>
    
      <item>
        <title>Setting up a custom domain on GitHub Pages</title>
        <description>&lt;p&gt;What I wanted was &lt;em&gt;http://kennyfraser.com&lt;/em&gt; to be the definitive URL of this site, and &lt;a href=&quot;http://www.kennyfraser.com/&quot;&gt;http://www.kennyfraser.com&lt;/a&gt; to redirect there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&quot;&gt;Using the instructions here&lt;/a&gt; I had to &lt;a href=&quot;https://help.github.com/articles/setting-up-your-pages-site-repository/&quot;&gt;add a CNAME &lt;em&gt;file&lt;/em&gt; to my GitHub User repository&lt;/a&gt; as well as &lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-subdomain/&quot;&gt;configure a CNAME &lt;em&gt;record&lt;/em&gt;&lt;/a&gt; at the DNS service provider (Fasthosts).&lt;/p&gt;

&lt;p&gt;The GitHub CNAME file contents are just:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;kennyfraser.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Don’t make this mistake&lt;/strong&gt; in the DNS provider’s CNAME records:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/CNAME-records-fasthosts-github-pages.png&quot; alt=&quot;CNAME records at Fasthosts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using a blank hostname in the CNAME records can mess up the MX routing for email, and possibly other services.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;www&lt;/em&gt; Host Name CNAME record points to my &lt;em&gt;username.github.io&lt;/em&gt;. This is the recommended &lt;a href=&quot;https://help.github.com/articles/about-supported-custom-domains/&quot;&gt;custom subdomain&lt;/a&gt; for best performance.&lt;/p&gt;

&lt;p&gt;Two &lt;a href=&quot;https://help.github.com/articles/setting-up-an-apex-domain/&quot;&gt;A Records for the apex &lt;em&gt;(non-www)&lt;/em&gt; domain&lt;/a&gt; with Github IP addresses are also necessary.  GitHub Pages &lt;a href=&quot;https://help.github.com/articles/setting-up-an-apex-domain-and-www-subdomain/&quot;&gt;automatically creates a redirect&lt;/a&gt; between the &lt;em&gt;www&lt;/em&gt; and &lt;em&gt;non-www&lt;/em&gt; versions of the domain, depending on the contents of the CNAME &lt;em&gt;file&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Feb 2016 21:00:00 +0000</pubDate>
        <link>http://kennyfraser.com/github/setting-up-a-custom-domain-on-github-pages</link>
        <guid isPermaLink="true">http://kennyfraser.com/github/setting-up-a-custom-domain-on-github-pages</guid>
        
        
      </item>
    
      <item>
        <title>This site is born from Jekyll and GitHub</title>
        <description>&lt;p&gt;I was considering moving my simple portfolio site at &lt;em&gt;kennyfraser.com&lt;/em&gt; to a more streamlined publishing setup.  I wanted to get away from hand-coded HTML/CSS files and FTP, and add simple blog functionality.&lt;/p&gt;

&lt;p&gt;After hearing good things about &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; via &lt;a href=&quot;https://css-tricks.com/&quot;&gt;CSS-Tricks&lt;/a&gt; and seeing how tightly coupled it can be with &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, I forged ahead.  Ironically, after beginning the installation process, my existing VPS host went down due to a power outage, taking my email forwarding with it.  No emails for more than 24 hours.  So managed to get a &lt;em&gt;lot&lt;/em&gt; done…&lt;/p&gt;

&lt;p&gt;Jekyll seems to be the &lt;a href=&quot;https://www.staticgen.com/&quot;&gt;most popular static site generator&lt;/a&gt; out there at the moment.  Experience of building sites with the content management system &lt;a href=&quot;http://statamic.com/&quot;&gt;Statamic&lt;/a&gt; has been very good so far.  Statamic needs PHP on the server but the flat file construction looks on the surface pretty similar to Jekyll (which doesn’t require any server scripting).&lt;/p&gt;

&lt;p&gt;Installation of Jekyll involved delving into the command line on OS X - I mainly used documentation at &lt;a href=&quot;http://jekyllrb.com/docs/installation/&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://gorails.com/setup/osx/10.11-el-capitan&quot;&gt;Go Rails&lt;/a&gt; (with Homebrew). &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; is also needed.&lt;/p&gt;

&lt;p&gt;The advantages pretty quicky made themselves clear:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; for writing blog posts and page content - as it should be&lt;/li&gt;
  &lt;li&gt;easily generates a local server at &lt;em&gt;http://localhost:4000/&lt;/em&gt; to preview the entire site, via the command line &lt;em&gt;jekyll serve&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;support for &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; generation of stylesheets&lt;/li&gt;
  &lt;li&gt;code syntax highlighting&lt;/li&gt;
  &lt;li&gt;fast performance and no database overhead&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My GitHub command line skills aren’t yet fully formed, so I’m using &lt;a href=&quot;https://desktop.github.com/&quot;&gt;GitHub Desktop&lt;/a&gt; to commit changes to local files then sync them with GitHub Pages.  Highlights here are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;everything&lt;/em&gt; is easily version controllable&lt;/li&gt;
  &lt;li&gt;quick and easy publishing with &lt;em&gt;Sync&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;speedy and reliable hosting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Will I run into limitations later? Probably. But right now things are &lt;em&gt;quick and easy&lt;/em&gt; - I like it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;&lt;img src=&quot;/img/jekyll-logo.png&quot; alt=&quot;Jekyll static site generator&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eduardo Bouças has written a good &lt;a href=&quot;https://davidwalsh.name/introduction-static-site-generators&quot;&gt;comparison of static vs dynamic site generators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Treehouse has a short workshop on how to &lt;a href=&quot;https://teamtreehouse.com/library/create-a-jekyll-site-on-github&quot;&gt;Create a Jekyll Site on Github&lt;/a&gt;. This assumes that Github is doing the work in generating your site from remote source files, rather than running a local version.&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Feb 2016 22:30:00 +0000</pubDate>
        <link>http://kennyfraser.com/jekyll/new-portfolio-blog-site-on-github-pages</link>
        <guid isPermaLink="true">http://kennyfraser.com/jekyll/new-portfolio-blog-site-on-github-pages</guid>
        
        
      </item>
    
  </channel>
</rss>
